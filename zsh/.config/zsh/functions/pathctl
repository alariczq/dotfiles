ENVFILEPATH=${ENVFILEPATH:-$ZDOTDIR/.env}

__unique() {
  awk '!seen[$0]++'
}

__join() {
  local sep="${1:-:}"
  awk -v sep=$sep '{ output = output ? output sep $0 : $0 } END { print output }'
}

__read_env() {
  local ENVFILEPATH=${1:-$ENVFILEPATH}
  sed -e 's/#.*//; s/^[[:blank:]]*//; s/[[:blank:]]*$//' -e '/^$/d' -e 's/.*/[ -d "&" ] \&\& echo &/' $ENVFILEPATH | sh
}

load_paths() {
  local ENVFILEPATH=${1:-$ENVFILEPATH}
  echo "$(__read_env $ENVFILEPATH | __join):$PATH" | tr ':' '\n' | __unique | __join
}

__err() {
  echo "$@" >&2
}

__precheck() {
  local file_path="${1:-$ENVFILEPATH}"
  if [[ ! -e $ENVFILEPATH ]]; then
    touch $ENVFILEPATH
    return 0
  fi

  if [[ ! -f $ENVFILEPATH ]]; then
    __err "Error: \"$ENVFILEPATH\" is not a file."
    return 1
  fi

  if [[ ! -w $ENVFILEPATH ]]; then
    __err "Error: \"$ENVFILEPATH\" is not writable."
    return 1
  fi
}

__pathctl() {
  local cmd="${1:-help}"
  if (( $# > 0 )); then
    shift
  fi

  case $cmd in
    put)
      ! __precheck $ENVFILEPATH && return 1

      for target in ${@:-$(pwd)}; do
        if [[ ! -d "$target" ]]; then
          __err "\"$target\": Not a directory"
          continue
        fi

        if [[ ! -e "$target" ]] ; then
          __err "\"$target\": Invalid PATH"
          return 1
        fi

        target=$(cd $target; pwd)

        for e in $(__read_env); do
          if [[ "$target" == "$e" ]]; then
            __err "\"$target\": Already exists"
            return 2
          fi
        done

        if [[ "$target" =~ "^$HOME" ]]; then
            target=$(echo $target | sed "s#$HOME#\$HOME#")
        fi

        awk -v target=$target 'BEGIN{ print target } { print }' $ENVFILEPATH | tee $ENVFILEPATH >/dev/null
      done

      export PATH=$(load_paths)
      eval "_PATHCTL_ENV_$(echo $ENVFILEPATH | tr './' '_')='$(__read_env | __unique | __join)'"
    ;;

    ls)
      if [[ ! -e "$ENVFILEPATH" ]]; then
        __err "\"$ENVFILEPATH\": File not found"
        return 1
      fi

      if [[ "$1" == "-p" ]]; then
        __read_env $ENVFILEPATH
      else
        cat $ENVFILEPATH
      fi
    ;;

    ls-paths)
      echo "$PATH" | tr ':' '\n'
    ;;

    del)
      ! __precheck $ENVFILEPATH && return 1

      local _paths="$PATH"
      local _envs="$(cat $ENVFILEPATH | sed -e 's/.*/echo &/' | sh | __join)"
      local expr=""

      for target in ${@:-$(pwd)}; do
        if [[ -e "$target" ]] && [[ -d "$target" ]]; then
          target=$(cd $target; pwd)
        fi

        expr+=$(awk -v envs=$_envs -v target=$target 'BEGIN {
          n = split(envs, paths, ":")
          for (i = 1; i <= n; i++) {
            if (paths[i] == target)
              output = output i "d;"
          }
          print output
        }')

        _paths=$(awk -v path=$_paths -v target=$target 'BEGIN {
          n = split(path, paths, ":")
          for (i = 1; i <= n; i++) {
            if (paths[i] != target)
              output = output ? output ":" paths[i] : paths[i]
          }
          print output
        }')
      done

      # use sed to delete lines
      [[ "$expr" != "" ]] && sed "$expr" $ENVFILEPATH | tee $ENVFILEPATH >/dev/null

      export PATH=$_paths
      eval "_PATHCTL_ENV_$(echo $ENVFILEPATH | tr './' '_')='$(__read_env | __unique | __join)'"
    ;;

    load)
      local file_path="${1:-$ENVFILEPATH}"
      if [[ ! -e "$file_path"  ]] || [[ ! -f $ENVFILEPATH ]]; then
        __err "\"$file_path\": No such file or not a file"
        return 1
      fi

      export PATH=$(echo $PATH | tr ':' '\n' |
        awk -v PATH_ENV="$(eval "echo \$_PATHCTL_ENV_$(echo $file_path | tr './' '_')")" \
          'BEGIN { n = split(PATH_ENV, paths, ":"); for (i = 1; i <= n; i++) { set[paths[i]]++ } } !set[$0]' |
        __join
      )

      export PATH=$(load_paths $file_path)
      eval "_PATHCTL_ENV_$(echo $file_path | tr './' '_')='$(__read_env | __unique | __join)'"
    ;;

    edit)
      ${EDITOR:-vim} $ENVFILEPATH
      pathctl load $ENVFILEPATH
    ;;

    tidy)
      ! __precheck $ENVFILEPATH && return 1

      __read_env | sed "s#$HOME#\$HOME#" | __unique | tee $ENVFILEPATH >/dev/null
    ;;

    help|*)
      printf "\033[0;32mfor manage PATH environment variable\033[0;00m

\033[0;33mUSAGE:\033[0;00m
  pathctl [COMMAND] [FLAGS]

\033[0;33mCOMMAND:\033[0;00m
  ls                  list PATHs
          [-p]        show real path
  del     [PATH]...   remove PATH from PATH environment; default: $(pwd)
  put     [PATH]...   put current dir into PATH
  load    [PATH]      load env from PATH
  edit                use editor open the env file; default: ${EDITOR:-vim}
  ls-paths            list the current \$PATH
  help                show this message
" >&2
    ;;
  esac
}

__pathctl "$@"
