ENVFILEPATH=${ENVFILEPATH:-$ZDOTDIR/.env}

__unique() {
  awk '!seen[$0]++'
}

__join_path() {
  awk '{ output = output ? output ":" $0 : $0 } END { print output }'
}

__read_env() {
  local ENVFILEPATH=${1:-$ENVFILEPATH}
  sed -e 's/#.*//; s/^[[:blank:]]*//; s/[[:blank:]]*$//' -e '/^$/d' -e 's/.*/[ -d "&" ] \&\& echo &/' $ENVFILEPATH | sh
}

load_paths() {
  local ENVFILEPATH=${1:-$ENVFILEPATH}
  echo "$(__read_env $ENVFILEPATH | __join_path):$PATH" | tr ':' '\n' | __unique | __join_path
}

__precheck() {
  local file_path="${1:-$ENVFILEPATH}"
  if [[ ! -e $ENVFILEPATH ]]; then
    touch $ENVFILEPATH
  elif [[ ! -f $ENVFILEPATH ]]; then
    echo "Error: \"$ENVFILEPATH\" is not a file." 
    return 1
  fi
}

__pathctl() {
  local cmd="$1"
  if (( $# > 0 )); then
    shift
  fi

  case $cmd in
    put)
      ! __precheck "$ENVFILEPATH" && return 1

      local target="${1:-$(pwd)}"
      if [[ ! "$target" =~ "^/" ]]; then
        # target must be a absoulute path
        target="$(pwd)/$target"
      fi

      if [[ ! -e "$target" ]] || [[ ! -d "$target" ]]; then
        echo "invalid PATH: $target"
        return 1
      fi

      for e in $(__read_env); do
        if [[ "$target" == "$e" ]]; then
          return 1
        fi
      done

      if [[ "$target" =~ "^$HOME" ]]; then
          target=$(echo $target | sed "s#$HOME#\$HOME#")
      fi

      echo "$target" >> $ENVFILEPATH

      export PATH=$(load_paths)
      eval _PATHCTL_ENV_$(echo $ENVFILEPATH | tr './' '_')=$(__read_env | __unique | __join_path)
    ;;

    ls)
      ! __precheck "$ENVFILEPATH" && return 1
      cat $ENVFILEPATH
    ;;

    del)
      ! __precheck "$ENVFILEPATH" && return 1

      local target="${1:-$(pwd)}"
        if [[ ! "$target" =~ "^/" ]]; then
        # target must be a absoulute path
        target="$(pwd)/$target"
      fi

      local line_num=0
      while read line; do
        (( line_num++ ))
        if [[ "$target" == "$line" ]]; then
          sed "${line_num}d" $ENVFILEPATH | tee $ENVFILEPATH >/dev/null
        fi
      done < <(cat $ENVFILEPATH | sed -e 's/.*/echo &/' | sh)

      export PATH=$(echo $PATH | tr ':' '\n' | sed -e "s|^$target$||;/^$/d" | __unique | __join_path)
      eval _PATHCTL_ENV_$(echo $ENVFILEPATH | tr './' '_')="$(__read_env | __unique | __join_path)"
    ;;

    load)
      local file_path="${1:-$ENVFILEPATH}"
      if [[ ! -e "$file_path"  ]]; then
        return 1
      fi

      export PATH=$(echo $PATH |
        tr ':' '\n' |
        awk -v PATH_ENV="$(eval "echo \$_PATHCTL_ENV_$(echo $file_path |tr './' '_')")" \
          'BEGIN { n = split(PATH_ENV, paths, ":"); for (i = 1; i <= n; i++) { set[paths[i]]++ } } !set[$0]' |
        __join_path
      )

      export PATH=$(load_paths $file_path)
      eval _PATHCTL_ENV_$(echo $file_path | tr './' '_')="$(__read_env | __unique | __join_path)"
    ;;

    edit)
      ${EDITOR:-vim} $ENVFILEPATH
      pathctl load $ENVFILEPATH
    ;;

    tidy)
      __read_env | __unique | tee $ENVFILEPATH >/dev/null
    ;;

    *)
      printf "\033[0;32mfor manage PATH environment variable\033[0;00m

\033[0;33mCOMMAND:\033[0;00m
  ls                  list PATHs
          [-p]        show real path
  del     [PATH]      remove PATH from PATH environment; default: $(pwd)
  put     [PATH]      put current dir into PATH
  load    [PATH]      load env from PATH
  edit                use editor open the env file; default: ${EDITOR:-vim}
"
    ;;
  esac
}

__pathctl "$@"